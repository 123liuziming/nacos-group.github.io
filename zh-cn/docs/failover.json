{
  "filename": "failover.md",
  "__html": "<h1>Java客户端容灾</h1>\n<p>我们可以在客户端开启本地容灾，用来应对Nacos服务端出现问题时，保证客户端的数据和接口稳定性。</p>\n<p>这里有两个使用场景：</p>\n<ol>\n<li>在Nacos服务端发布的时候，我们主动把容灾打开，这样客户端只使用本地容灾数据，Nacos服务的数据抖动或者数据错误都不会影响客户端，我们在Nacos服务端升级完成并且数据验证没问题后再关闭容灾；</li>\n<li>在Nacos运行期间，突然出现接口不可用或者数据异常，我们可以快速的开启容灾，让客户端使用容灾数据，减小服务受影响的窗口，等Nacos服务端恢复后再关闭容灾；</li>\n</ol>\n<p>具体方案可以参考：<a href=\"https://github.com/alibaba/nacos/issues/11053\">https://github.com/alibaba/nacos/issues/11053</a></p>\n<h2>流程简介</h2>\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/alibaba/nacos/assets/4593375/f9011075-11b8-401b-9dbb-1366347a9a44\">\n<p>如上图所示，客户端的查询请求都会先经过FailoverReactor，如果FailoverReactor有数据，则直接使用，从而忽略掉Nacos Server返回的数据；如果FailoverReactor里面没有数据，则走正常流程，从ServiceInfoHolder里读取缓存；</p>\n<h2>磁盘容灾</h2>\n<p>FailoverReactor里的数据可以使用不同的数据源，默认的数据源为磁盘。</p>\n<h3>磁盘容灾文件目录</h3>\n<p>默认的磁盘容灾文件目录为：</p>\n<pre><code>{user.home}/nacos/naming/{namespace}/failover\n</code></pre>\n<p>这个目录可以定制，如果设置了-D参数：</p>\n<pre><code>-DJM.SNAPSHOT.PATH=/mypath\n</code></pre>\n<p>则容灾磁盘文件目录变为：</p>\n<pre><code>/mypath/nacos/naming/{namespace}/failover\n</code></pre>\n<h3>磁盘容灾开关</h3>\n<p>容灾开关存放在磁盘容灾文件目录下的一个文件里，具体文件名为：</p>\n<pre><code>00-00---000-VIPSRV_FAILOVER_SWITCH-000---00-00\n</code></pre>\n<p>文件里存放一个数字0或者1，0代表关闭容灾，1代表打开容灾</p>\n<h3>磁盘容灾数据</h3>\n<p>容灾的数据分成多个文件，都是存放在磁盘容灾文件目录下，每一个文件存储一个单独的服务的容灾数据，每个文件的文件名格式如下：</p>\n<pre><code>{group.name}%40%40{service.name}\n</code></pre>\n<p>里面的内容为客户端的ServiceInfo类的JSON序列化字符串，例如：</p>\n<pre><code>{\n    &quot;name&quot;:&quot;DEFAULT_GROUP@@test.2&quot;,\n    &quot;groupName&quot;:&quot;DEFAULT_GROUP&quot;,\n    &quot;clusters&quot;:&quot;&quot;,\n    &quot;cacheMillis&quot;:10000,\n    &quot;hosts&quot;:[\n        {\n            &quot;instanceId&quot;:&quot;1.1.2.1#8888#DEFAULT#DEFAULT_GROUP@@test.2&quot;,\n            &quot;ip&quot;:&quot;1.1.2.1&quot;,\n            &quot;port&quot;:8888,\n            &quot;weight&quot;:1,\n            &quot;healthy&quot;:true,\n            &quot;enabled&quot;:true,\n            &quot;ephemeral&quot;:true,\n            &quot;clusterName&quot;:&quot;DEFAULT&quot;,\n            &quot;serviceName&quot;:&quot;DEFAULT_GROUP@@test.2&quot;,\n            &quot;metadata&quot;:{\n                &quot;k1&quot;:&quot;v1&quot;\n            },\n            &quot;instanceHeartBeatInterval&quot;:5000,\n            &quot;instanceHeartBeatTimeOut&quot;:15000,\n            &quot;ipDeleteTimeout&quot;:30000\n        }\n    ],\n    &quot;lastRefTime&quot;:1689835375819,\n    &quot;checksum&quot;:&quot;&quot;,\n    &quot;allIPs&quot;:false,\n    &quot;reachProtectionThreshold&quot;:false,\n    &quot;valid&quot;:true\n}\n</code></pre>\n<h2>扩展容灾数据源</h2>\n<p>磁盘容灾不需要外部依赖，逻辑比较简单，但是管理起来不太方便。因此我们也支持使用SPI来扩展容灾数据源，使用磁盘以外的存储。以下是扩展的步骤。</p>\n<h3>开发自己的容灾数据源类</h3>\n<p>编写一个类，实现接口com.alibaba.nacos.client.naming.backups.FailoverDataSource：</p>\n<pre><code>public class MyFailoverDataSource implements FailoverDataSource {\n    \n    @Override\n    public FailoverSwitch getSwitch() {\n        // TODO write your own implementation.\n        return null;\n    }\n    \n    @Override\n    public Map&lt;String, FailoverData&gt; getFailoverData() {\n        // TODO write your own implementation. For naming module, the map\n        // should contain failover data with service name as key and ServiceInfo as value\n        return null;\n    }\n}\n</code></pre>\n<h3>配置容灾数据源类</h3>\n<p>在资源目录下新建文件：</p>\n<pre><code>{resource.root}/META-INF/services/com.alibaba.nacos.client.naming.backups.FailoverDataSource\n</code></pre>\n<p>{resource.root}的一个例子是src/main/resources。</p>\n<p>文件内容为：</p>\n<pre><code>your.package.MyFailoverDataSource\n</code></pre>\n",
  "link": "/zh-cn/docs/failover.html",
  "meta": {
    "title": "Java客户端容灾",
    "keywords": "容灾",
    "description": "Java客户端容灾用户指南"
  }
}